# Stjarna Development Rules
# Cursor will follow these guidelines when generating code

## ðŸŽ¯ Core Principles
- **Widget-first**: All changes must work in embedded widget context
- **EU-only**: All data stays in EU regions (Supabase EU, no US endpoints)
- **Security-first**: Never expose secrets to client, always validate input
- **Accessibility**: All UI must be keyboard navigable with proper ARIA labels

## ðŸ”’ Security Rules
- **Never** use `createServerClient` on client-side code
- **Always** validate API input with Zod schemas
- **Always** check `response.ok` before using fetch results
- **Never** store sensitive data in localStorage/sessionStorage
- **Always** escape HTML content with `escapeHtml()` function
- **Always** use `noopener` for external links

## ðŸŽ¨ UI/UX Rules
- **Widget layout**: Full-page modal, white background, black text
- **Chat responses**: Concise (1-2 lines), factual, with 2-4 item suggestions
- **Error handling**: Graceful fallbacks, never crash the widget
- **Mobile-first**: All interactions must work on mobile devices
- **Loading states**: Show loading indicators for async operations

## ðŸ§ª Code Quality
- **TypeScript**: Use strict mode, no `any` types
- **ESLint**: Follow Next.js + accessibility rules
- **Prettier**: Consistent formatting across all files
- **Testing**: Write tests for critical widget functionality
- **Documentation**: Comment complex business logic

## ðŸš€ Performance
- **Bundle size**: Keep widget.js under 50KB gzipped
- **API calls**: Rate limit to 10 req/30s per restaurant
- **Caching**: Use appropriate cache headers for menu data
- **Lazy loading**: Load non-critical features on demand

## ðŸ”§ Development Workflow
- **Pre-commit**: Run lint-staged (ESLint + Prettier)
- **CI/CD**: All tests must pass before merge
- **Environment**: Use .env.local for local development
- **Database**: Use Supabase migrations for schema changes

## ðŸ“± Widget-Specific Rules
- **Session tokens**: Persist in sessionStorage per restaurant
- **Cart state**: Store in localStorage with restaurant prefix
- **API origin**: Derive from script.src or data-endpoint attribute
- **Telemetry**: Use Plausible with error protection
- **Closed state**: Disable all ordering when restaurant is closed

## ðŸš« What NOT to Do
- Don't use inline `onclick` handlers
- Don't bypass RLS policies
- Don't log sensitive data to console
- Don't use US-based services or regions
- Don't add dependencies outside the allowed list
- Don't store full Stripe payloads
- Don't expose customer PII in chat/orders
